BUILD and INSTALL

Dependencies:
    The documentation is included as a pre-built ZIP file, so
    that the ability to build the docs is not required to build
    the program, yet the docs can be built from source if desired
    (see doc/Makefile).
    
    The main dependency for epspline is the wxWidgets library.
    All the Unix(-like) systems that epspline has been tested
    with provided wxWidgets in their package systems (some in more
    than one, e.g., with OpenIndiana, the volunteer CSW packages
    provide a wxWidgets that does not have problems seen in
    the `pkg' provided package [botched character spacing in the
    help viewer, probably a bug in a wxWidgets dependency]).
    For MSWindows, or to build from source,
    http://www.wxwidgets.org./downloads/ has the packages.
    Note that on Unix-like systems epspline will probably
    require the GTK2 build of wxWidgets. GTK2 is a configure
    option in the source package; if your package system
    provides wxWidgets then it very likely is the GTK version.
    In fact, searching for a *wxgtk* package listing might be
    better than searching for wxwidgets. [Update: wx 3.0.0 is
    released and has support for GTK3, which has been tested
    briefly on two sytems, and generally works, but has small
    problems with some GUI display elements, but the systems
    are not very current and might have imperfect GTK3
    integration with the desktop environment; YMMV.]
    
    Epspline is prepared to use message translations in the format
    supported by wxWidgets, but there are, as of initial release,
    no `real' translations. A file po/en_US/epspline.mo is included
    with the source archive. This is not a language (or even dialect)
    translation, but merely provides a few typographical characters
    such quotation marks, and the e-acute for `bezier', as the strings
    in the source use ASCII only. Like the docs, the binary is
    included for convenience, so that the GNU gettext tools need not
    be present to build the program; but, if strings are changed
    in the source, the Makefile will want to rebuild the message
    catalog(s). (Hopefully, there will be some people willing to
    contribute translations, and I apologize in advance that the
    strings in the source have not been prepared as nicely as is
    suggested in the gettext documentation.)
    
    The source uses a hash table with POV-Ray reserved strings
    that has been generated with GNU gperf. The hash table source file
    depends on src/pov_reserved_words.text, but this should not
    need changing unless a new version of POV-Ray changes the list;
    therefore, gperf should not be needed to build epspline.
    
MSWindows:
    Presently, epspline will build (and work) against wxWidgets 2.8
    with the Digital Mars compiler and STLPort (the cost-free
    download tools). The source includes makefile.dmc and
    src\makefile.dmc which will need to be edited to set the
    paths to the wxWidgets headers and libraries. (Note that the
    DMC tools work well with WINE under GNU/Linux.)
    
    Other native MSW compilers will almost certainly not be able
    to use the DMC makefiles directly, but they might provide a
    guide or starting point for writing makefiles for other tools,
    or even to set up IDE projects. Also, successful compilation
    with other tools might require some small source edits.
    
    MinGW builds epspline for MSWindows very nicely under Cygwin
    or a Unix system using the main POSIX Makefiles. This is the
    MSW build most tested by the original author. Unfortunately,
    for someone not accustomed to Unix-like systems, installation
    and use of Cygwin seems like it might be a steep requirement
    (but might prove to be well worth the effort).
    
    Building with MinGW is much like using GCC on a Unix-like
    system (as described below). These are the main points:
    
        * the make target is `mingw' which of course must be
          given to the make command
        
        * the wxWidgets libraries must be built with MinGW too,
          of course, and since the `wx-config' script from that
          is probably not in (or first in) $PATH, it's path must
          be assigned to the CF macro on the commandline.
        
        * it might be important to use the same compiler options
          for building the application that were used building the
          wx library (possibly not in all possible cases). The
          original author has built wxWidgets with -Os -static
          and found that using -O3 -static for epspline produced
          many dire warnings. (-Os is fine for epspline.)
        
        * the `install' target is not useful, but `clean',
          `cleandepends', and `cleanall' are.
    
    A MinGW make command might look something like:
    
        % make CF=$PWD/../wxMSW_2.8.12_unicode_mingw-config \
            CXXFLAGS="-Os -static" LDFLAGS="$LDFLAGS -static" mingw

    See ``Makefile Targets and Macros'' below.

Unix/POSIX:
    The build is accomplished with Makefiles that are written to
    comply with POSIX.  Whenever possible, system commands invoked
    in the rules, and the options given, are as described in The
    Open Group's online POSIX documentation. It is also necessary
    to invoke commands that are not specified by POSIX; the C++
    compiler is notable among these. The shell code in the the
    rules might seem long and ugly, mostly because it is, but it
    works with the several systems tested, and probably does not
    stray from POSIX Bourne shell.
    
    Regardless of the portability of POSIX make, some systems will
    need something more than a simple ``make'' invocation. Each
    tested system is discussed separately below, based on defaults
    in the Makefile. To change defaults, such as the installation
    directory, see ``Makefile Targets and Macros'' below the
    system discussions. The system discussions are sorted from
    what the author has found to be the simplest to the least simple.
    
    If your Unix is not one discussed here, please try anyway --
    if you have built (or simply have) wxWidgets, then it should
    not be difficult to divine the magic spell (such a spell
    often conjures a patch).

    NOTE: as of wxWidgets 3.0.x the increasingly popular clang(++)
	compiler will require an extra option in CXXFLAGS to get a
	successful build: -std=c++11.  So far this has not been needed
	with GCC/g++ which seems to accept the newer C++ features now
	used in wx by default, but in the future . . . who knows?  For
	clang++ use:

	  make CXX=clang++ CXXFLAGS="$CXXFLAGS -std=c++11" <other args>

	which should succeed.  Unfortunately specifying the newer standard
	raises deprecation warnings from the Epspline code, which had
	previously compiled without warnings, but they are not critical.

GNU/Linux (probably GNU/*):
    With wxWidgets installed from a package system, a simple
    ``make && sudo make install'' should work. Check first
    whether a separate *-dev package must be installed; e.g.,
    libwxgtk2.8-dev on Debian or Ubuntu.

NetBSD:
    With wxWidgets installed from pkgsrc (or binary package from
    `pkg_add', etc.), ``make && sudo make install'' should work.
    Of course, /usr/pkg/bin (or the alternative used) must be
    in $PATH, but if you're using NetBSD, you know all this.
    Note that on the author's system the wx-config script is
    emitting a runpath argument for the linker, but it's a
    thing to watch for.

OpenBSD:
    With wxWidgets installed from ports, the only additional
    concern is that, as of OpenBSD 4.9, make does not seem to
    pass over the .POSIX target; i.e., invoking simply `make' will
    do nothing and exit success. This is no problem: just do
    ``make all && sudo make install'' and it should work (this
    is the only system found to require `make all'). As usual,
    the linker will nag about a few unsafe string functions.

    UPDATE: as of OpenBSD 5.5 (I do not know which version exactly)
    OpenBSD make recognizes .POSIX such that a simple ``make''
    will work.

FreeBSD:
    UPDATE: wxWidgets 2.6 is no longer supported; see README.
    Reference to 2.6 below is merely historical.

    This is based on FreeBSD 9.0 and associated ports. The ports
    system has wxGTK 2.6, 2.8, and 2.9, and may be built in
    the unicode or `ansi' version, and for any installation there
    will be a wx configuration script with the version and text-
    type encoded in the name: wxgtk2-2.6-config, wxgtk2-2.8-config,
    wxgtk2u-2.6-config, wxgtk2u-2.8-config, wxgtk2u-2.9-config.
	There should also be a default wx-config (check with
	wx-config --version).
    
    Select an installed wx*config (preferably the latest version
    and preferably a unicode build) and
	``make CF=wxgtk<whatever>-config && sudo make install''
    should work.
    
    Please avoid wx 2.6 if possible, especially the unicode build.
    UPDATE: wxWidgets 2.6 is no longer supported; see README.
    Reference to 2.6 above is merely historical.

OpenIndiana:
    This is based on an OpenIndiana system on which uname -a says
    ``SunOS [hostname] 5.11 oi_151a7 i86pc i386 i86pc'' and which
    has the SunStudio tools installed -- sunstudio12u1. If building
    with GCC (g++) see OpenSolaris below.
    
    Epspline has been built and tested with two binary wxWidgets
    packages: with library/graphics/wxwidgets of the `pkg' utility,
    and with the package from the OpenCSW open source package
    system (http://www.opencsw.org/). Both wxWidgets packages
    are built with Sun CC, and both of their wx-config scripts
    will produce compiler options that g++ does not like; so, if
    you wish to build with GCC against one of these packages, you
    are on your own. Also, both wx-config scripts emit full paths
    to CC (the C++ compiler), and it might not be the path to CC
    on your system. Therefore, the Makefile's default of
    CXX=`wx-config --cxx` might not work and CXX=CC should be given
    on the make commandline (of course, CXX may be given a full path).
    
    As mentioned elsewhere, the Makefiles use POSIX command invocations
    when possible. OpenIndiana (and OpenSolaris, and presumably the
    closed commercial version) has versions of commands under several
    directories, and some are POSIXish and some are not. For example,
    /usr/bin/grep does not accept -F, while /usr/{xpg4,gnu}/bin/grep
    do. Interestingly, /usr/bin/make works fine, handling the .POSIX
    special target as it should. In any case, as users of this system
    probably know already, PATH should be set up as needed; in this
    case, ensuring POSIXish commands are found first. The author
    has /usr/xpg4/bin before /usr/gnu/bin which is before /usr/bin
    (nothing from */sbin is used).
    
    Sun Studio tools have a locale bug that causes complaints like
    ``"/tmp/ube.03192.6.s", line 6508 : Illegal character: <2f>''
    on the author's system (oddly, not OpenSolaris, just OpenIndiana),
    which has LANG=en_US.UTF-8. Setting LANG=C make lets compilation
    succeed.
    
    The native ``install'' command does not like the BSDish arguments
    used in the Makefile, but OpenIndiana, and OpenSolaris, have a
    ``ginstall'' command that works.
    
    So, ensuring $PATH leads to POSIX commands, a successful build
    with pkg://wxwidgets should result from something like:
    
        % LANG=C make CXX=CC CXXFLAGS="-fast -xO3" \
        && sudo make INSTALLCMD=ginstall install

    To use an alternative wxWidgets installation, such as one from
    OpenCSW, the command might look like:
    
        % LANG=C make CXX=CC CXXFLAGS="-fast -xO3" \
        CF=/opt/csw/bin/wx-config LDFLAGS="-R /opt/csw/lib" \
        && sudo make INSTALLCMD=ginstall install

    Note the addition of the CF macro to select a wx-config, and
    if needed, LDFLAGS to add a runpath to the wx shared libraries.
    
    BTW, if CC should not send reports home, these might help:
        export UT_NO_USAGE_TRACKING=1
        export SUNW_NO_UPDATE_NOTIFY=1

OpenSolaris:
    This is based on an OpenSolaris system on which uname -a says
    ``SunOS [hostname] 5.11 snv_111b i86pc i386 i86pc Solaris''
    and which has GCC installed, as well as pkg://sunstudio12u1.
    
    To build with Sun CC, first read the OpenIndiana discussion
    above. In addition to that, the author has found it necessary
    to work around a compiler or STL bug by adding includes on the
    commandline: CXXFLAGS="-include vector -include algorithm".
    This seems to be because the STL templates use _T as a parameter
    name, but wxWidgets defines a _T macro first, and CC gets
    confused. Using -include lets CC see the template parameter
    name first. In any case, the work-around has been working
    for the author (and this bug has not appeared in OpenIndiana).

    It does not seem necessary to use LANG=C, as in OpenIndiana,
    even though the author's system assigns LANG the same value.

    So, ensuring $PATH leads to POSIX commands, a successful build
    with pkg://wxwidgets should result from something like:
    
        % make CXX=CC \
        CXXFLAGS="-fast -xO3 -include vector -include algorithm" \
        && sudo make INSTALLCMD=ginstall install

    To build with GCC, assuming a wxWidgets built with GCC and
    installed under /usr/local, and to install epspline under
    /opt/povstuff, this should work:
    
        % make CXXFLAGS="-O3" PREFIX=/opt/povstuff \
        CF=/usr/local/bin/wx-config \
        LDFLAGS="-Wl,-rpath=/usr/local/lib" \
        && sudo make INSTALLCMD=ginstall PREFIX=/opt/povstuff install

    Note that PREFIX= is on both make commands. It is needed in the
    program binary, and obviously in the install command.

Makefile Targets and Macros:
    
    Targets first -- not a complete list, see Makefiles if you must:

    all:
        build the application; should be taken as the default target
        by POSIX make (i.e., ignoring the magic .POSIX target), as
        it appears first (after .POSIX)

    install:
        install the program and data; depends on all
        
    install_base:
        like install, but does not install the XDG desktop items;
        useful to speed up the install if it has been done before,
        or if the XDG bits are unwanted

    uninstall:
        remove the program and data *ONLY IF* invoked from the source
        directory used for install, because files to remove are
        taken from paths saved under the `uninstall' directory
        (directories created by install are not removed)

    clean:
        remove the program binary and object files, and possibly
        *core, etc.

    cleandepend cleandepends:
        clean source dependency file (generated by `all')

    mingw:
        equivalent of `all', but builds the MSW version with MinGW

    Now, the macros:

    CF= (default `wx-config')
        The most important of the macros. The Makefile
        default for CF is ``wx-config'' but there may be more than
        one of these, or in some cases the script is not named
        ``wx-config'' so set CF=<path_to_wx_config_script> as needed.

    LIBS= (default `$(CF) --libs $(LIBSARG)')
        The library auguments to the link-edit stage of the build
        as necessary to use wxWidgets. If the current system needs
        additional libraries made explicit, try the default shown
        above on the make command line with additions prepended
        or appended.
    
    LIBSARG= (default `std,aui')
        Used in LIBS above; should be matched to wxWidgets libraries
        actually used. It is a comma separated list of base names.
        Starting with wxWidgets 3.0.0 it seems that ``wx-config --help''
        will display the available library base names, near the
        bottom of the output.
        
    PREFIX= (default /usr/local)
        directory under which install is done (there are also
        {BIN,DATA,HELPDATA,L10N}PREFIX macros with defaults
        based on ${PREFIX}; see Makefile) -- this macro (and
        similar) must be given on the build invocation of make
        as well as the install invocation

    INSTALLCMD= (default `install')
        BSD or GNU compatible install command, if `install' is not
        so; e.g., on *Solaris, OpenIndiana ``ginstall'' will work
        if available
    
    INSTALLOPTS= (default -c -s -m 555 -o 0 -g 0)
        if you don't like the default, use this; also, if there is
        no compatible $(INSTALLCMD), try giving options for another
        `install' in this

    LDFLAGS=
        Extra arguments for your link editor; e.g. if your
        wxWidgets shared objects are somewhere needing a
        runtime path in the program binary

    CXX= (default `$(CF) --cxx`)
        use for a C++ compiler other that named by the wx-config
        script, being sure it is compatible; e.g. CXX=clang++
        or CXX=my-better-but-compatible-mingw or CXX=CC (SunStudio)

    CXXFLAGS=
        compilation options, usually optimizations, beyond those
        named by the wx-config script

